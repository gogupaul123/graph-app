{"version":3,"sources":["components/BarGraph.js","components/MyGraph.js","components/Content.js","App.js","index.js"],"names":["BarGraph","myData","myNewData","letterFrequency","map","item","i","month","value","length","xMax","yMax","x","d","y","xScale","scaleBand","range","round","domain","padding","yScale","scaleLinear","Math","max","compose","scale","accessor","data","xPoint","yPoint","width","height","barHeight","Group","AxisLeft","top","left","label","stroke","tickTextFill","axisClassName","Bar","bandwidth","fill","AxisBottom","tickTextFontSize","MyGraph","className","Content","humanDate","content","allPosts","post","createdAt","date","dateVal","Date","parseFloat","substr","getMonth","months","filter","App","useState","posts","updatePosts","useEffect","fetch","method","headers","body","JSON","stringify","query","then","json","res","params","particles","number","density","enable","value_area","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca0be3e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { letterFrequency } from '@visx/mock-data';\r\nimport { Group } from '@visx/group';\r\nimport { Bar } from '@visx/shape';\r\nimport { scaleLinear, scaleBand } from '@visx/scale';\r\nimport { AxisLeft, AxisBottom, Axis } from '@visx/axis';\r\n\r\nfunction BarGraph({myData}) {\r\n// We'll use some mock data from `@visx/mock-data` for this.\r\nconst data = letterFrequency;\r\n \r\n \r\n\r\nconst myNewData = myData.map((item, i)=>{return({month:i + 1, value:item.length})})\r\n \r\n\r\n// Define the graph dimensions and margins\r\nconst width = 558;\r\nconst height = 550;\r\nconst margin = { top: 20, bottom: 20, left: 20, right: 20 };\r\n\r\n// Then we'll create some bounds\r\nconst xMax = width - margin.left - margin.right;\r\nconst yMax = height - margin.top - margin.bottom;\r\n\r\n \r\n\r\n// We'll make some helpers to get at the data we want\r\nconst x = d => d.month;\r\nconst y = d => d.value;\r\n\r\n// And then scale the graph by our data\r\nconst xScale = scaleBand({\r\n  range: [0, xMax],\r\n  round: true,\r\n  domain: myNewData.map(x),\r\n  padding: 0.1,\r\n});\r\nconst yScale = scaleLinear({\r\n  range: [yMax, 5],\r\n  round: true,\r\n  domain: [0, Math.max(...myNewData.map(y))],\r\n});\r\n\r\n// Compose together the scale and accessor functions to get point functions\r\nconst compose = (scale, accessor) => data => scale(accessor(data));\r\nconst xPoint = compose(xScale, x);\r\nconst yPoint = compose(yScale, y);\r\n\r\n// Finally we'll embed it all in an SVG\r\n \r\n   \r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      {myNewData.map((d, i) => {\r\n        const barHeight = yMax - yPoint(d);\r\n        return (\r\n          \r\n            <Group key={`${i}`}>\r\n                <AxisLeft\r\n                  scale={yScale}\r\n                  top={0}\r\n                  left={1}\r\n                  label={'*10000'}\r\n                  stroke={'#1b1a1e'}\r\n                  tickTextFill={'#1b1a1e'}\r\n                  axisClassName={'axisLeft'}\r\n                />\r\n              <Bar\r\n                  x={xPoint(d)}\r\n                  y={yMax - barHeight}\r\n                  height={barHeight}\r\n                  width={xScale.bandwidth()}\r\n                  fill=\"#1bcfba\"\r\n              />\r\n              <AxisBottom\r\n                  scale={xScale }\r\n                  top={yMax}\r\n                  left={0}\r\n                  label={'Month'}\r\n                  stroke={'#1b1a1e'}\r\n                  tickTextFill={'white'}\r\n                  tickTextFontSize={40}\r\n                  axisClassName={'axisBot'} \r\n                />\r\n            </Group>\r\n          \r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n}\r\nexport default BarGraph;","import React from 'react';\r\nimport BarGraph from './BarGraph';\r\n\r\nfunction MyGraph({data}) {\r\n     \r\n    \r\n    return (\r\n        <div className='myGraph'>\r\n            <BarGraph myData ={data}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyGraph\r\n","import React from 'react';\r\nimport MyGraph from './MyGraph'\r\n\r\nfunction Content({content}) {\r\n  \r\n  const posts = content.data.allPosts;\r\n  const createdAt = posts.map((post)=>post.createdAt);\r\n  const humanDate = createdAt.map((date)=>{\r\n    var dateVal =`/Date(${date})/`;\r\n    var date = new Date( parseFloat( dateVal.substr(6 )));\r\n    return(\r\n        date.getMonth() + 1  \r\n        )\r\n  })\r\n  \r\n  \r\n\r\n  const january = humanDate.filter(date=>date===1);\r\n  const february = humanDate.filter(date=>date===2);\r\n  const march = humanDate.filter(date=>date===3);\r\n  const april = humanDate.filter(date=>date===4);\r\n  const may = humanDate.filter(date=>date===5);\r\n  const june = humanDate.filter(date=>date===6);\r\n  const july = humanDate.filter(date=>date===7);\r\n  const august = humanDate.filter(date=>date===8);\r\n  const september = humanDate.filter(date=>date===9);\r\n  const october = humanDate.filter(date=>date===10);\r\n  const november = humanDate.filter(date=>date===11);\r\n  const december = humanDate.filter(date=>date===12);\r\n\r\n  \r\n  //bundle the data into one variable so I can pass everything to the <MyGraph/> component\r\n  let months = [january, february, march, april, may, june, july, august, september, october, november, december] \r\n\r\n  // console.log('january: ' +january.length + '/february: ' + february.length  + '/march: ' + march.length + '/april: ' + april.length + '/may: ' + may.length + '/june: ' + june.length + '/july: ' + july.length + '/august: ' +\r\n  // august.length + '/september: ' + september.length + '/october: ' + october.length + '/november: ' + november.length + '/december: ' + december.length)\r\n\r\n\r\n\r\n  return (\r\n    <div className='content'>\r\n      <h1>Posts created in each month of 2019</h1>\r\n      <MyGraph data ={months}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content;\r\n","import React, {useState, useEffect} from 'react';\nimport Content from './components/Content.js';\nimport Particles from 'react-particles-js';\n\nfunction App() { \n\n  const particlesParams={\n    particles:{\n        number:{\n            value:50,\n            density:{\n                enable:true,\n                value_area:500\n            }\n        }\n    }\n}\n\n  const [posts, updatePosts] = useState({data:{\n    allPosts:[1,2,3]\n  }});\n\n\n  //Fetching the data only when the page loads for the first time (useEffect , [])\n  useEffect(()=>{\n    fetch('https://fakerql.stephix.uk/graphql', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ query: `{\n    allPosts(count: 100) {\n      published\n      createdAt\n    }\n  }` }),\n})\n  .then(data => data.json())\n  //Then set the state to our data\n  .then(res => updatePosts(res));\n  }, [])\n \n   \n\n\n  return (\n    <>\n    <Particles className='particles' params={particlesParams}/>\n    <Content content={posts}/>\n\n     \n       \n    </>\n  )\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n \n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}